[{"/home/bryanwg/projects/Tinder-Eats/Frontend/src/index.tsx":"1","/home/bryanwg/projects/Tinder-Eats/Frontend/src/reportWebVitals.ts":"2","/home/bryanwg/projects/Tinder-Eats/Frontend/src/theme.ts":"3","/home/bryanwg/projects/Tinder-Eats/Frontend/src/App.tsx":"4","/home/bryanwg/projects/Tinder-Eats/Frontend/src/firebaseInit.ts":"5","/home/bryanwg/projects/Tinder-Eats/Frontend/src/Component/Navbar.tsx":"6","/home/bryanwg/projects/Tinder-Eats/Frontend/src/Pages/Main.tsx":"7","/home/bryanwg/projects/Tinder-Eats/Frontend/src/Pages/Matches.tsx":"8","/home/bryanwg/projects/Tinder-Eats/Frontend/src/mock.ts":"9","/home/bryanwg/projects/Tinder-Eats/Frontend/src/Component/Card.tsx":"10","/home/bryanwg/projects/Tinder-Eats/Frontend/src/functions.ts":"11"},{"size":761,"mtime":1627275992876,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1626771840006,"results":"14","hashOfConfig":"13"},{"size":320,"mtime":1626948289336,"results":"15","hashOfConfig":"13"},{"size":4295,"mtime":1627278998276,"results":"16","hashOfConfig":"13"},{"size":673,"mtime":1626947375996,"results":"17","hashOfConfig":"13"},{"size":5909,"mtime":1627383494436,"results":"18","hashOfConfig":"13"},{"size":3625,"mtime":1627404805806,"results":"19","hashOfConfig":"13"},{"size":4810,"mtime":1627403410326,"results":"20","hashOfConfig":"13"},{"size":36544,"mtime":1627294618226,"results":"21","hashOfConfig":"13"},{"size":7769,"mtime":1627404800616,"results":"22","hashOfConfig":"13"},{"size":409,"mtime":1627288360866,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"bc0pba",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"27"},"/home/bryanwg/projects/Tinder-Eats/Frontend/src/index.tsx",["53"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ColorModeScript } from '@chakra-ui/react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from './theme';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { GoArrowLeft } from 'react-icons/go';\n\nReactDOM.render(\n    <ChakraProvider>\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n    </ChakraProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["54","55"],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/reportWebVitals.ts",[],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/theme.ts",[],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/App.tsx",["56","57","58","59","60","61"],"import React from 'react';\nimport logo from './logo.svg';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch as RouteSwitch,\n    Redirect\n} from 'react-router-dom';\nimport {\n    Box,\n    Button,\n    Center,\n    Flex,\n    Heading,\n    HStack,\n    Image,\n    Link,\n    Stack,\n    Text,\n    useColorModeValue,\n    VStack\n} from '@chakra-ui/react';\nimport { FcGoogle } from 'react-icons/fc';\nimport { FaFacebook } from 'react-icons/fa';\nimport Navbar from './Component/Navbar';\nimport Main from './Pages/Main';\nimport ape from './Icons/ape.gif';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport firebaseInit from './firebaseInit';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport Matches from './Pages/Matches';\n\nfirebaseInit();\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n    const [user] = useAuthState(auth);\n    return <>{user ? <MainPage /> : <SignIn />}</>;\n}\nconst initialiseUser = async () => {\n    const userId = auth.currentUser.uid;\n    const userRef = firestore.doc(`matched_restaurant/${userId}`);\n    const userDoc: any = await userRef.get();\n    if (!userDoc.exists) {\n        userRef.set({ liked_restaurant: [] }, { merge: true });\n    }\n};\n\nconst MainPage = () => {\n    const matchedRes = firestore.collection('matched_restaurant');\n    const query = matchedRes.limit(2);\n    const [restaurants] = useCollectionData(query, { idField: 'id' });\n    console.log(restaurants);\n    console.log(auth.currentUser.uid);\n    initialiseUser();\n\n    // console.log(auth.currentUser.uid);\n    return (\n        <Router>\n            <Navbar>\n                <RouteSwitch>\n                    <Route exact path={'/'} component={Main} />\n                    <Route path={'/'} component={Matches} />\n                    <Route component={PageNotFound} />\n                </RouteSwitch>\n            </Navbar>\n        </Router>\n    );\n};\n\nconst SignIn = () => {\n    return (\n        <Flex\n            minH={'100vh'}\n            align={'center'}\n            justify={'center'}\n            bg={useColorModeValue('gray.50', 'gray.800')}\n        >\n            <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n                <Stack align={'center'}>\n                    <Heading fontSize={'4xl'}>Sign in to your account</Heading>\n                </Stack>\n                <Box\n                    rounded={'lg'}\n                    bg={useColorModeValue('white', 'gray.700')}\n                    boxShadow={'lg'}\n                    p={8}\n                >\n                    <GoogleButton />\n                    {/* <FacebookButton /> */}\n                </Box>\n            </Stack>\n        </Flex>\n    );\n};\n\nconst PageNotFound = () => {\n    return (\n        <Flex\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyItems=\"center\"\n            justifyContent=\"center\"\n        >\n            <Text fontSize=\"5xl\">Page not found!!</Text>\n            <Image src={ape} />\n        </Flex>\n    );\n};\n\nconst GoogleButton = () => {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider);\n    };\n    return (\n        <Center p={8}>\n            <Button\n                w={'full'}\n                maxW={'md'}\n                colorScheme={'messenger'}\n                leftIcon={<FcGoogle />}\n                onClick={signInWithGoogle}\n            >\n                <Center>\n                    <Text>Sign in with Google</Text>\n                </Center>\n            </Button>\n        </Center>\n    );\n};\n\nconst FacebookButton = () => {\n    const signInWithFB = () => {\n        const provider = new firebase.auth.FacebookAuthProvider();\n        auth.signInWithPopup(provider);\n    };\n    return (\n        <Center p={8}>\n            <Button\n                w={'full'}\n                maxW={'md'}\n                colorScheme={'facebook'}\n                leftIcon={<FaFacebook />}\n                onClick={signInWithFB}\n            >\n                <Center>\n                    <Text>Continue with Facebook</Text>\n                </Center>\n            </Button>\n        </Center>\n    );\n};\nexport default App;\n","/home/bryanwg/projects/Tinder-Eats/Frontend/src/firebaseInit.ts",[],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/Component/Navbar.tsx",["62","63","64"],"import { ReactNode } from 'react';\nimport {\n    Box,\n    Flex,\n    Avatar,\n    HStack,\n    Link,\n    IconButton,\n    Button,\n    Menu,\n    Icon,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    MenuDivider,\n    useDisclosure,\n    useColorModeValue,\n    Stack,\n    Text,\n    useColorMode\n} from '@chakra-ui/react';\nimport {\n    HamburgerIcon,\n    CloseIcon,\n    AddIcon,\n    MoonIcon,\n    SunIcon\n} from '@chakra-ui/icons';\nimport { ReactComponent as TinderEatsIcon } from '../Icons/tinderEats.svg';\nimport { Link as RouteLink } from 'react-router-dom';\nimport { GoSignOut } from 'react-icons/go';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseInit from '../firebaseInit';\n\nfirebaseInit();\nconst auth = firebase.auth();\n\nconst Links = [\n    { label: 'Find a Bite!', link: '/' },\n    { label: 'Matches', link: '/Matches' }\n];\n\nconst NavLink = ({\n    children\n}: {\n    children: { label: string; link: string };\n}) => (\n    <Link\n        as={RouteLink}\n        to={children.link}\n        px={2}\n        py={1}\n        rounded={'md'}\n        _hover={{\n            textDecoration: 'none',\n            bg: useColorModeValue('gray.200', 'gray.700')\n        }}\n        href={'#'}\n    >\n        {children.label}\n    </Link>\n);\n\nexport default function PrimaryLayout(props: any) {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const { colorMode, toggleColorMode } = useColorMode();\n    //console.log(auth.currentUser.uid)\n    return (\n        <>\n            <Box bg={useColorModeValue('gray.100', 'gray.900')} px={4}>\n                <Flex\n                    h={16}\n                    alignItems={'center'}\n                    justifyContent={'space-between'}\n                >\n                    <IconButton\n                        size={'md'}\n                        icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n                        aria-label={'Open Menu'}\n                        display={{ md: 'none' }}\n                        onClick={isOpen ? onClose : onOpen}\n\n                    />\n                    <HStack spacing={8} alignItems={'center'}>\n                        <HStack>\n                            <Icon as={TinderEatsIcon} boxSize=\"10\" />\n                            <Text\n                                color={useColorModeValue('black', 'gray.300')}\n                                fontWeight=\"medium\"\n                            >\n                                Tinder Eats\n                            </Text>\n                        </HStack>\n                        <HStack\n                            as={'nav'}\n                            spacing={4}\n                            display={{ base: 'none', md: 'flex' }}\n                        >\n                            {Links.map((link) => (\n                                <NavLink key={link.label}>{link}</NavLink>\n                            ))}\n                        </HStack>\n                    </HStack>\n                    <Flex alignItems={'center'}>\n                        <IconButton\n                            bg={useColorModeValue('gray.100', 'gray.1000')}\n                            display={{ base: 'none', md: 'block' }}\n                            size={'sm'}\n                            icon={\n                                colorMode === 'light' ? (\n                                    <MoonIcon />\n                                ) : (\n                                    <SunIcon />\n                                )\n                            }\n                            aria-label={'Open Menu'}\n                            onClick={toggleColorMode}\n                        />\n                        <Button\n                            display={{ base: 'none', md: 'block' }}\n                            variant={'solid'}\n                            colorScheme={'pink'}\n                            size={'sm'}\n                            mx={2}\n                            rightIcon={<GoSignOut size='13' />}\n                            onClick={() => auth.signOut()}\n                        >\n                            Sign out\n                        </Button>\n                        <Menu>\n                            <MenuButton\n                                as={Button}\n                                rounded={'full'}\n                                variant={'link'}\n                                cursor={'pointer'}\n                                minW={0}\n                            >\n                                <Avatar\n                                    size={'sm'}\n                                    src={auth.currentUser.photoURL}\n                                />\n                            </MenuButton>\n                            <MenuList display={{ md: 'none' }}>\n                                <MenuItem onClick={() => auth.signOut()}>\n                                    Sign Out\n                                </MenuItem>\n                                <MenuItem onClick={toggleColorMode}>\n                                    {colorMode === 'light' ? (\n                                        <Text>Dark</Text>\n                                    ) : (\n                                        <Text>Light</Text>\n                                    )}\n                                </MenuItem>\n                            </MenuList>\n                        </Menu>\n                    </Flex>\n                </Flex>\n\n                {isOpen ? (\n                    <Box pb={4} display={{ md: 'none' }}>\n                        <Stack as={'nav'} spacing={4}>\n                            {Links.map((link) => (\n                                <NavLink key={link.label}>{link}</NavLink>\n                            ))}\n                        </Stack>\n                    </Box>\n                ) : null}\n            </Box>\n            <Box p={4} overflowX='hidden'>{props.children}</Box>\n        </>\n    );\n}\n\n","/home/bryanwg/projects/Tinder-Eats/Frontend/src/Pages/Main.tsx",["65","66","67","68"],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/Pages/Matches.tsx",["69","70","71","72","73","74"],"import {\n    Box,\n    Button,\n    Center,\n    Container,\n    Divider,\n    Flex,\n    HStack,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Spacer,\n    Table,\n    Tbody,\n    Td,\n    Text,\n    Th,\n    Thead,\n    Tr,\n    useColorModeValue,\n    useDisclosure,\n    useToast\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport firebaseInit from '../firebaseInit';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { CardDetails } from '../Component/Card';\n\nfirebaseInit();\nconst firestore = firebase.firestore();\nexport default function Matches() {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [matchedRes, setMatchedRes] = useState<any[] | null>(null);\n    const [resDetails, setResDetails] = useState<any | null>(null);\n    const auth = firebase.auth();\n    const userId = auth?.currentUser?.uid;\n    const toast = useToast();\n    firebase\n        .firestore()\n        .doc(`matched_restaurant/${userId}`)\n        .get()\n        .then((res) => {\n            setMatchedRes(res.data().liked_restaurant);\n        });\n\n    const selectRes = (place_id) => {\n        console.log('in select Res');\n        const resRef = firestore.doc(`restaurants/${place_id}`);\n        resRef\n            .get()\n            .then((data) => {\n                setResDetails(data.data());\n                onOpen();\n            })\n            .catch((error) =>\n                toast({\n                    title: error,\n                    status: 'error',\n                    isClosable: true\n                })\n            );\n    };\n    const onHoverColor = useColorModeValue('pink.100', 'purple.900');\n    const bgColor = useColorModeValue('white', 'gray.800');\n    return (\n        <Flex display={{ base: 'block', md: 'flex' }}>\n            <Box w={{ base: '100%', md: '50%' }}>\n                {matchedRes ? (\n                    <Table>\n                        <Thead>\n                            <Tr>\n                                <Th>\n                                    <HStack>\n                                        <Text>Restaurant</Text>\n                                        <Spacer />\n                                        <Button>Random</Button>\n                                    </HStack>\n                                </Th>\n                            </Tr>\n                        </Thead>\n                        <Tbody>\n                            {matchedRes.map((res) => (\n                                <Tr\n                                    _hover={{\n                                        bg: onHoverColor,\n                                        cursor: 'pointer'\n                                    }}\n                                    key={res.place_id}\n                                    onClick={() => selectRes(res.place_id)}\n                                    bg={\n                                        res.place_id === resDetails?.place_id\n                                            ? onHoverColor\n                                            : bgColor\n                                    }\n                                    rounded=\"lg\"\n                                >\n                                    <Td>{res.name}</Td>\n                                </Tr>\n                            ))}\n                        </Tbody>\n                    </Table>\n                ) : (\n                    <Text fontSize=\"xl\">No Liked Restaurant</Text>\n                )}\n            </Box>\n\n            {matchedRes && (\n                // <Modal isOpen={isOpen} onClose={onClose}>\n                <Center\n                    w=\"50%\"\n                    display={{\n                        base: 'none',\n                        md: 'inline-flex'\n                    }}\n\n                    // position={{\n                    //     sm: 'fixed'\n                    // }}\n                >\n                    {resDetails ? (\n                        <CardDetails {...resDetails} />\n                    ) : (\n                        <Text fontSize=\"xl\">\n                            Pick Restaurant to be displayed\n                        </Text>\n                    )}\n                </Center>\n                // </Modal>\n            )}\n\n            <Modal isOpen={isOpen} onClose={onClose} size=\"md\">\n                <ModalContent\n                    visibility={{ base: 'visible', md: 'hidden' }}\n                    bg={useColorModeValue('#FAFAFA', 'gray.700')}\n                >\n                    <ModalCloseButton />\n                    <Center>\n                        <CardDetails {...resDetails} isModel />\n                    </Center>\n                </ModalContent>\n            </Modal>\n        </Flex>\n    );\n}\n","/home/bryanwg/projects/Tinder-Eats/Frontend/src/mock.ts",[],["75","76"],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/Component/Card.tsx",["77","78","79","80","81","82","83","84"],"/home/bryanwg/projects/Tinder-Eats/Frontend/src/functions.ts",["85"],"import { useEffect } from 'react';\nimport axios from 'axios';\n\nexport async function GetRestaurant(req: any) {\n    return axios.get('http://localhost:5000/restaurants', {\n        params: {\n            ...req\n        }\n    });\n}\n\nexport async function GetDetails(place_id: string) {\n    return axios.get('http://localhost:5000/restaurants/details', {\n        params: {\n            place_id\n        }\n    });\n}\n",{"ruleId":"86","severity":1,"message":"87","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":21},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"94","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":12},{"ruleId":"86","severity":1,"message":"95","line":7,"column":5,"nodeType":"88","messageId":"89","endLine":7,"endColumn":13},{"ruleId":"86","severity":1,"message":"96","line":15,"column":5,"nodeType":"88","messageId":"89","endLine":15,"endColumn":11},{"ruleId":"86","severity":1,"message":"97","line":17,"column":5,"nodeType":"88","messageId":"89","endLine":17,"endColumn":9},{"ruleId":"86","severity":1,"message":"98","line":21,"column":5,"nodeType":"88","messageId":"89","endLine":21,"endColumn":11},{"ruleId":"86","severity":1,"message":"99","line":138,"column":7,"nodeType":"88","messageId":"89","endLine":138,"endColumn":21},{"ruleId":"86","severity":1,"message":"100","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":19},{"ruleId":"86","severity":1,"message":"101","line":15,"column":5,"nodeType":"88","messageId":"89","endLine":15,"endColumn":16},{"ruleId":"86","severity":1,"message":"102","line":25,"column":5,"nodeType":"88","messageId":"89","endLine":25,"endColumn":12},{"ruleId":"86","severity":1,"message":"103","line":3,"column":5,"nodeType":"88","messageId":"89","endLine":3,"endColumn":8},{"ruleId":"86","severity":1,"message":"104","line":7,"column":5,"nodeType":"88","messageId":"89","endLine":7,"endColumn":22},{"ruleId":"86","severity":1,"message":"105","line":12,"column":10,"nodeType":"88","messageId":"89","endLine":12,"endColumn":14},{"ruleId":"86","severity":1,"message":"106","line":47,"column":12,"nodeType":"88","messageId":"89","endLine":47,"endColumn":22},{"ruleId":"86","severity":1,"message":"107","line":5,"column":5,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"108","line":6,"column":5,"nodeType":"88","messageId":"89","endLine":6,"endColumn":12},{"ruleId":"86","severity":1,"message":"109","line":10,"column":5,"nodeType":"88","messageId":"89","endLine":10,"endColumn":14},{"ruleId":"86","severity":1,"message":"110","line":13,"column":5,"nodeType":"88","messageId":"89","endLine":13,"endColumn":16},{"ruleId":"86","severity":1,"message":"111","line":14,"column":5,"nodeType":"88","messageId":"89","endLine":14,"endColumn":16},{"ruleId":"86","severity":1,"message":"112","line":15,"column":5,"nodeType":"88","messageId":"89","endLine":15,"endColumn":17},{"ruleId":"90","replacedBy":"113"},{"ruleId":"92","replacedBy":"114"},{"ruleId":"86","severity":1,"message":"103","line":2,"column":5,"nodeType":"88","messageId":"89","endLine":2,"endColumn":8},{"ruleId":"86","severity":1,"message":"115","line":19,"column":17,"nodeType":"88","messageId":"89","endLine":19,"endColumn":25},{"ruleId":"86","severity":1,"message":"116","line":19,"column":27,"nodeType":"88","messageId":"89","endLine":19,"endColumn":36},{"ruleId":"86","severity":1,"message":"117","line":37,"column":11,"nodeType":"88","messageId":"89","endLine":37,"endColumn":21},{"ruleId":"86","severity":1,"message":"118","line":42,"column":13,"nodeType":"88","messageId":"89","endLine":42,"endColumn":16},{"ruleId":"86","severity":1,"message":"119","line":42,"column":18,"nodeType":"88","messageId":"89","endLine":42,"endColumn":26},{"ruleId":"86","severity":1,"message":"120","line":43,"column":11,"nodeType":"88","messageId":"89","endLine":43,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":182,"column":25,"nodeType":"123","messageId":"124","endLine":188,"endColumn":26,"fix":"125"},{"ruleId":"86","severity":1,"message":"116","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":19},"@typescript-eslint/no-unused-vars","'GoArrowLeft' is defined but never used.","Identifier","unusedVar","no-native-reassign",["126"],"no-negated-in-lhs",["127"],"'logo' is defined but never used.","'Redirect' is defined but never used.","'HStack' is defined but never used.","'Link' is defined but never used.","'VStack' is defined but never used.","'FacebookButton' is assigned a value but never used.","'ReactNode' is defined but never used.","'MenuDivider' is defined but never used.","'AddIcon' is defined but never used.","'Box' is defined but never used.","'useColorModeValue' is defined but never used.","'mock' is defined but never used.","'restaurant' is assigned a value but never used.","'Container' is defined but never used.","'Divider' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'ModalHeader' is defined but never used.","'ModalOverlay' is defined but never used.",["126"],["127"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'matchedRes' is assigned a value but never used.","'uid' is assigned a value but never used.","'photoURL' is assigned a value but never used.","'toast' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"128","text":"129"},"no-global-assign","no-unsafe-negation",[6294,6294]," rel=\"noreferrer\""]